# -*- coding: utf-8 -*-
"""import_bcb_FOCUS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HhW3FLTu6JYIaB4YzXvEY4-9rNLnsPmj

### This script imports BR BACEN - FOCUS data
# Fonte: https://analisemacro.com.br/economia/indicadores/coletando-dados-do-banco-central-com-python/
"""

# Import packages

import pandas as pd
from bcb import Expectativas

from useful_functions import *

# Get info from "Expectativas" API

expec = Expectativas()

# get the available endpoints

#expec.describe()

# Check endpoint

expec.describe('ExpectativasMercadoAnuais')

# Define parameters to query BCB server

# Define the start date - yyyy/mm/dd
start_date = '2000-01-01'

# Import the endpoint

ep = expec.get_endpoint('ExpectativasMercadoAnuais')

df_raw = ep.query().filter(ep.Data >= start_date).collect()

# Define the targeted indicators

target_indicators = ['Balança comercial',
                       'Investimento direto no país',
                       'Resultado primário',
                       'IPCA',
                       'PIB Total',
                       'Selic',
                       'Câmbio',
                       'Dívida bruta do governo geral',
                       'Dívida líquida do setor público'
                       ]




# Filter the targeted indicators
filtered_df = df_raw.loc[df_raw['Indicador'].isin(target_indicators)]

# Filter baseCalculo = 0 only keeps forecasts made during 30 days before publication
filtered_df = filtered_df.loc[filtered_df['baseCalculo'] == 0] # baseCalculo = 0 only keeps forecasts made during 30 days before publication

# Filter the dataset to not include exportações e importações
filtered_df = filtered_df.loc[~filtered_df['IndicadorDetalhe'].isin(['Importações', 'Exportações'])]

# Create a copy
df_BR_indicators = filtered_df.copy()

# IN the case of the indicador "Balança comercial", filter the "IndicadorDetalhe" = 'saldo'
df_BR_indicators = df_BR_indicators[~df_BR_indicators['IndicadorDetalhe'].isin(['Exportações', 'Importações'])] # Only keeps the "saldo" of the "Balança comercial" indicator or NAs

# Define the index
df_BR_indicators.set_index('Data', inplace=True)

# Define columns to be dropped
columns_to_drop = ['IndicadorDetalhe',
                   'Media',
                   'DesvioPadrao',
                   'Minimo',
                   'Maximo',
                   'numeroRespondentes',
                   'baseCalculo'] # We will use only the median expectations and discard the mean, maximun and minimum.

#Drop the variables
df_BR_indicators.drop(columns_to_drop, axis=1, inplace=True)

# Rename columns
df_BR_indicators.rename(columns={
    'Indicador': 'indicator',
    'DataReferencia': 'reference_year',
    'Mediana': 'median'
},
inplace=True)

df_BR_indicators.rename_axis('date', inplace=True)

# Convert reference_year to date format
df_BR_indicators['reference_year'] = pd.to_datetime(df_BR_indicators['reference_year'], format='%Y').dt.year

### Apply some filters

# Filter reference year with a maximum of two years beyond the collection date
df_BR_indicators = df_BR_indicators[(df_BR_indicators['reference_year'] <= df_BR_indicators.index.year+2)]

# Translate observations:

# Create mapping pattern
indicator_mapping = {
    'Balança comercial': 'trade_balance', #US$ billion
    'Investimento direto no país': 'DIC', #Direct investment in the country - US$ billion
    'Resultado primário': 'primary_result', # % GDP
    'IPCA': 'inflation', # % per year
    'PIB Total': 'GDP (%)', #% of previous year GDP
    'Selic': 'basic_interest_rate', # % per year
    'Câmbio': 'US$_currency', # R$ / US$
    'Dívida bruta do governo geral': 'gross_public_debt', #Gross general government debt  - % GDP
    'Dívida líquida do setor público': 'net_public_debt' #Net public sector debt - % GDP
}

#Aply translation pattern
df_BR_indicators['indicator'] = df_BR_indicators['indicator'].replace(indicator_mapping)
df_BR_indicators.reset_index(inplace=True) # Reset index

# Categorize each reference_year as "y", "y+1", "y+2"
df_BR_indicators['reference_year'] = df_BR_indicators.apply(lambda row: 'y'
                            if row['reference_year'] == row['date'].year
                            else ('y+1' if row['reference_year'] == row['date'].year + 1
                                  else ('y+2' if row['reference_year'] == row['date'].year + 2 else None)), axis=1)


# Drop years with "None" in the reference_year variable, because they are 'forecasts' for passed years.
df_BR_indicators.dropna(subset=['reference_year'], inplace=True)

# Create a new column with the parameter name to aggregate indicator and reference_year
df_BR_indicators['parameter'] = 'exp_'+ df_BR_indicators['indicator'] + '_' + df_BR_indicators['reference_year'].astype(str)
df_BR_indicators.drop(['indicator', 'reference_year'], axis=1, inplace=True)

# Create a pivot table with the median values of each parameter
df_BR_indicators_wide = df_BR_indicators.pivot(index='date', columns='parameter', values='median')

# Adjust index date format
df_focus_indicators = adjust_index_date_format(df_BR_indicators_wide)

# Export the dataset to csv
df_focus_indicators.to_csv('../data/df_FOCUS.csv', index=True)